e <- B[B(1,15)]
e <- B[C(1,15)]
C <- matrix(c(12,24,56,1,3,88),ncol = 2)
C
B
f <- B[C(2,4)
q()
f <- B[C(2,4)]
C
B
articles <- c("Q","D","DD")
articles
sujets <- c("A","A","A")
sujets
dfmots <- data.frame(articles,sujets)
dfmots
dfmots2 <- data.frame(col2 = articles,col1 = sujets)
dfmots2
dfmots$articles
print(dfmots$articles)
print(dfmots[,1])
print(dfmots[,2])
print(dfmots[3,])
MyText <- read.csv(file = "stateData.csv",header = TRUE,sep = ",")
MyText
MyText <- read.csv(file = "stateData.csv")
MyText
MyText
MyText1 <- read.table(file = "stateData.csv")
MyText1
View(MyText)
View(MyText1)
View(MyText)
fichier <- file.choose()
MyText <- read.csv(file = "stateData.csv",header = TRUE,sep = ",")
MyText
MyText
MyText
MyText <- read.csv(file = "stateData.csv")
MyText
res <- summary(b)
res
?summary
res <- summary(B)
res
B
plot(B[,1],B[,2])
plot(B[1,],B[2,])
hist(B)
reg <- lm(B[,1] ~B[,2])
reg
?lem
?lm
reg <- lm(B[,1])
res3 <- summary(reg)
res3
t.test(B[,1],B[,2])
?t.test
B
B[,1]
B[,2]
?mean
install.packages("rgeos")
library(rgdal)
for (i in 1:10) {
for (j in 1:5) {
print(i,j)
}
}
for (i in 1:10) {
for (j in 1:5) {
print(i)
}
}
help("kmeans")
?clustring
clearPushBack()
kmeans(B, 2, iter.max = 10, nstart = 1,
algorithm = c("Hartigan-Wong", "Lloyd", "Forgy",
"MacQueen"), trace=FALSE)
kmeans(B, 2, iter.max = 10, nstart = 1,algorithm = c("Hartigan-Wong","Lloyd", "Forgy","MacQueen"), trace=FALSE)
kmeans(B, 1, iter.max = 10, nstart = 1,algorithm = c("Hartigan-Wong","Lloyd", "Forgy","MacQueen"), trace=FALSE)
B
kmeans(B, 0, iter.max = 10, nstart = 1,algorithm = c("Hartigan-Wong","Lloyd", "Forgy","MacQueen"), trace=FALSE)
kmeans(B, 0, iter.max = 10, nstart = 1,algorithm = c("Hartigan-Wong"), trace=FALSE)
kmeans(B, 1, iter.max = 10, nstart = 1,algorithm = c("Hartigan-Wong"), trace=FALSE)
B
B[4]
B[0]
B[1]
B[5]
B[5,1]
B[1,5]
?rgdal
B[1.]
B[1,]
B
B[B(B<15)]
B[(B<15)]
C
B[C(2,2)]
B[c(2,2)]
B
B[1:3]
?gbuffer
?gBuffer
if(i<12 & i>3) {
print(i)
}
for (i in 1:10) {
if(i<12 & i>3) {
print(i)
}
}
View(dfmots)
View(dfmots2)
View(info)
View(MyText)
View(MyText1)
View(reg)
getwd()
library(swirl)
ls()
swirl()
1
swirl()
q()
?t.test
B
t.test(B[,1],B[,2])
t.test(B[,1])
B[,1]
B
t.test(B[,1])
class(nuts3)
?class
View(res3)
View(res3)
View(reg)
B
reg <- lm(B[,1] ~B[,2])
reg
kmeans(B, 1, iter.max = 10, nstart = 1,algorithm = c("Hartigan-Wong"), trace=FALSE)
cluster <- kmeans(B, 1, iter.max = 10, nstart = 1,algorithm = c("Hartigan-Wong"), trace=FALSE)
View(cluster)
View(cluster)
I2 <- diag(rep(1,2))
I2
I2 <- diag(rep(3,2))
I2
x <- seq(1,4)
x
y <- seq(4,7)
y
outer(x,y,FUN="*")
install.packages("Rcpp")
install.packages("rgdal")
install.packages("readXl")
install.packages("readxl")
install.packages("rgeos")
#open the file
Mydata<-read.csv("CO-cigarette.csv")
View(Mydata)
View(Mydata)
subset(Mydata,Nicotine)
subset(Mydata,Nicotine == 1)
dataMatrix <- as.matrix(Mydata)
View(dataMatrix)
View(dataMatrix)
dataMatrix
elementsData <- read.csv("CO-cigarette.csv",col.names = "TAR","Nicotine","WEIGHT")
Mydata[,1]
elementsData <- matrix(c(Mydata[,2],Mydata[,3],Mydata[,4]),ncol = 3)
View(elementsData)
View(elementsData)
CO <- matrix(Mydata[,5],ncol = 1)
CO
elementsDataWithCO <- matrix(c(Mydata[,2],Mydata[,3],Mydata[,4],Mydata[,5]),ncol = 4)
View(elementsDataWithCO)
View(elementsDataWithCO)
View(elementsDataWithCO)
View(elementsDataWithCO)
mean(elementsDataWithCO)
mean(elementsDataWithCO[,1])
mean(elementsDataWithCO[,4])
print("moyenne de (CO)Y",i, mean(elementsDataWithCO[,4]),"\n")
print("moyenne de (CO)Y", mean(elementsDataWithCO[,4]),"\n")
cat("moyenne de X",i,mean(elementsDataWithCO[,i]),"\n")
#open the file
#Mydata<-read.csv("CO-cigarette.csv")
for (i in 1:3) {
print("moyenne de X",i)
print(mean(elementsDataWithCO[,i]),"\n")
}
print("moyenne de (CO)Y", mean(elementsDataWithCO[,4]))
for (i in 1:3) { print("moyenne de X",i)  print(mean(elementsDataWithCO[,i]))}
print(i)
for (i in 1:10) {
print(i)
}
for (i in 1:3) {
print("moyenne de X")
}
for (i in 1:3) {
print("moyenne de X",i)
}
print("moyenne de X") print(i)
for (i in 1:3) {
print("moyenne de X") print(i)
}
for (i in 1:3) {
print("moyenne de X")
print(i)
}
for (i in 1:3) {
cat("moyenne de X",i)
}
for (i in 1:3) {
cat("moyenne de X",i,"\n")
}
for (i in 1:3) {
cat("moyenne de X",i,mean(elementsDataWithCO[,i]),"\n")
}
cat("moyenne de X",i,"est",mean(elementsDataWithCO[,i]),"\n")
for (i in 1:3) {
cat("moyenne de X",i,"est",mean(elementsDataWithCO[,i]),"\n")
}
for (i in 1:3) {
cat("moyenne de X",i,"est",mean(elementsDataWithCO[,i]),"\n")
}
for (i in 1:3) {
cat("moyenne de X",i,"est",mean(elementsDataWithCO[,i]),"\n")
}
clearPushBack()
clear()
clc()
cat("\f")
cat("\f")
for (i in 1:3) {
cat("moyenne de X",i,"est",mean(elementsDataWithCO[,i]),"\n")
}
cat("moyenne de (CO)Y est",mean(elementsDataWithCO[,4]),"\n")
cat("median de (CO)Y est",median(elementsDataWithCO[,4]),"\n")
cat("median de (CO)Y est",median(elementsDataWithCO[,4]),"\n")
cat("median de (CO)Y est",median(elementsDataWithCO[,4]),"\n")
for (i in 1:3) {
cat("median de X",i,"est",median(elementsDataWithCO[,i]),"\n")
}
cat("\f")
for (i in 1:3) {
cat("median de X",i,"est",median(elementsDataWithCO[,i]),"\n")
}
cat("median de (CO)Y est",median(elementsDataWithCO[,4]),"\n")
cat("\f")
for (i in 1:3) {
cat("Variance de X",i,"est",median(elementsDataWithCO[,i]),"\n")
}
for (i in 1:3) {
cat("Variance de X",i,"est",var(elementsDataWithCO[,i]),"\n")
}
cat("\f")
for (i in 1:3) {
cat("Variance de X",i,"est",var(elementsDataWithCO[,i]),"\n")
}
cat("Variance de (CO)Y est",var(elementsDataWithCO[,4]),"\n")
cat("\f")
for (i in 1:3) {
cat("L'ecart-type de X",i,"est",sd(elementsDataWithCO[,i]),"\n")
}
cat("L'ecart-type de (CO)Y est",sd(elementsDataWithCO[,4]),"\n")
cat("\f")
cat("Variance total de ,X1 ,X2 ,X3 ,Y est",V,"\n")
for (i in 1:4) {
V <- V + var(elementsDataWithCO[,i])
}
for (i in 1:4) {
V <- V + var(elementsDataWithCO[,i])
}
for (i in 1:4) {
V <- V + var(elementsDataWithCO[,i])
}
#cat("Variance total de ,X1 ,X2 ,X3 ,Y est",V,"\n")
for (i in 1:4) {
V <- V + var(elementsDataWithCO[,i])
}
for (i in 1:4) {
V <- V + var(elementsDataWithCO[,i])
}
cat("\f")
library(tidyverse)
install.packages("tidyverse")
cat("\f")
library(tidyverse)
Data<-as.tibble(elementsDataWithCO)
Data <- as.tibble(elementsDataWithCO)
Data <- as.tibble(elementsDataWithCO)
cat("\f")
Data <- as.tibble(Mydata)
library(tidyverse)
Data <- as.tibble(Mydata)
as.tibble(Data)
as.tibble(Data)
cat("\f")
library(tidyverse)
Data <- as.tibble(Mydata)
as.tibble(Data)
Data <- as.tibble(elementsDataWithCO)
as.tibble(Data)
summary(fit) # show results
fit <- lm(Y ~ X1 + X2 + x3, data=elementsDataWithCO)
summary(fit) # show results
fit <- lm(Y ~ X1 + X2 + X3, data=Mydata)
summary(fit) # show results
fit <- lm(Mydata$CO ~  Mydata$TAR + Mydata$Nicotine + Mydata$WEIGHT , data=Mydata)
summary(fit) # show results
View(fit)
View(fit)
cat("\f")
plot(fit)
plot(fit)
plot(fit)
cat("\f")
view(fit)
fit
fit <- lm(Mydata$CO ~  Mydata$TAR + Mydata$Nicotine + Mydata$WEIGHT , data=Mydata)
summary(fit) # show results
summary(fit)
summary(fit) # show results
summary(fit) # show results
install.packages(car)
install.packages(car)
scatterplot(prestige~education, data=Mydata)
install.packages("car", dependencies = TRUE)
scatterplot(Mydata$CO ~ ., data=Mydata)
scatterplot(Mydata$CO ~ ., data=Mydata)
library(car)
scatterplot(Mydata$CO ~ ., data=Mydata)
scatterplot(Mydata$CO ~ Mydata$TAR, data=Mydata)
scatterplot(Mydata$CO ~ Mydata$Nicotine, data=Mydata)
scatterplot(Mydata$CO ~ Mydata$WEIGHT, data=Mydata)
scatterplot(Mydata$CO ~ ., data=Mydata)
fit
acf(residuals(fit), main="fit")
fit1 <- lm(Mydata$CO~  Mydata$Nicotine , data=Mydata)
acf(residuals(fit1), main="fit")
?xsls
?Export
Export(fit,"REG-LIN.csv")
Export(fit,"REG-LIN.csv",csv)
fit
summary(fit)
fit1 <- lm(Mydata$CO~  Mydata$Nicotine + Mydata$TAR, data=Mydata)
scatterplot(Mydata$CO ~ Mydata$Nicotine + Mydata$TAR, data=Mydata)
scatterplot(Mydata$CO ~ Mydata$Nicotine + Mydata$TAR, data=Mydata)
scatterplot(Mydata$CO ~ Mydata$Nicotine + Mydata$TAR, data=Mydata)
scatterplot(Mydata$CO ~ Mydata$Nicotine  Mydata$TAR, data=Mydata)
scatterplot(Mydata$CO ~ Mydata$Nicotine , Mydata$TAR, data=Mydata)
cat("\f")
plot(elementsDataWithCO[,1],elementsDataWithCO[,4])
plot(elementsDataWithCO[,1],elementsDataWithCO[,4])
cat("\f")
plot(Mydata$TAR,Mydata$CO)
plot(Mydata$Nicotine,Mydata$CO)
plot(Mydata$WEIGHT,Mydata$CO)
summary(fit)
cat("\f")
}
cat("Cofficient de correlation partiel Bravais-Pearson entre Y et X",i,"est:"
cor(elementsDataWithCO[,i],elementsDataWithCO[,4],method = "pearson"))
cat("\f")
for(i in 1:3){
cat("Cofficient de correlation partiel Bravais-Pearson entre Y et X",i,"est:",
cor(elementsDataWithCO[,i],elementsDataWithCO[,4],method = "pearson")+"\n")
}
cat("Cofficient de correlation Bravais-Pearson entre Y et X3 est:",
cor(Mydata$CO,Mydata$WEIGHT,method = "pearson")+"\n")
for(i in 1:3){
cat("Cofficient de correlation partiel Bravais-Pearson entre Y et X",i,"est:",
cor(elementsDataWithCO[,i],elementsDataWithCO[,4],method = "pearson"),"\n")
}
cat("\f")
for(i in 1:3){
cat("Cofficient de correlation partiel Bravais-Pearson entre Y et X",i,"est:",
cor(elementsDataWithCO[,i],elementsDataWithCO[,4],method = "pearson"),"\n")
}
cat("\f")
for(i in 1:3){
cat("Cofficient de correlation partiel Bravais-Pearson entre Y et X",i,"est:",
cor(elementsDataWithCO[,i],elementsDataWithCO[,4],method = "pearson"),"\n")
}
for(i in 1:3){
cat("Cofficient de correlation partiel Bravais-Pearson entre Y et X",i,"est:",
cor.test(elementsDataWithCO[,i],elementsDataWithCO[,4],method = "pearson"),"\n")
}
# cat("Cofficient de correlation partiel Bravais-Pearson entre Y et X",i,"est:",
cor.test(elementsDataWithCO[,i],elementsDataWithCO[,4],method = "pearson")#,"\n")
cat("\f")
for(i in 1:3){
# cat("Cofficient de correlation partiel Bravais-Pearson entre Y et X",i,"est:",
cor.test(elementsDataWithCO[,i],elementsDataWithCO[,4],method = "pearson")#,"\n")
}
# cat("Cofficient de correlation partiel Bravais-Pearson entre Y et X",i,"est:",
cor.test(elementsDataWithCO[,i],elementsDataWithCO[,4],method = "pearson")#,"\n")
cor.test(elementsDataWithCO[,3],elementsDataWithCO[,4],method = "pearson")
cor.test(elementsDataWithCO[,1],elementsDataWithCO[,4],method = "pearson")
cat("\f")
cor.test(Mydata$TAR,Mydata$CO,method = "pearson")
cor.test(Mydata$Nicotine,Mydata$CO,method = "pearson")
cor.test(Mydata$WEIGHT,Mydata$CO,method = "pearson")
cat("\f")
lm.beta
# REGRESSION MULTIPLE sTANDARISE
install.packages("QuantPsyc")
cat("\f")
fitStandrized <- lm.beta(fit)
library(QuantPsyc)
cat("\f")
fitStandrized <- lm.beta(fit)
summary(fitStandrized)
fitStandrized
fit
summary(fit)
fitStandrized <- lm.beta(Mydata$CO ~ Mydata$TAR + Mydata$Nicotine + Mydata$WEIGHT , data = Mydata )
fitStandrized <- lm.beta(Mydata$CO ~ Mydata$TAR + Mydata$Nicotine + Mydata$WEIGHT , data(Mydata) )
library(QuantPsyc)
fitStandrized <- lm.beta(Mydata$CO ~ Mydata$TAR + Mydata$Nicotine + Mydata$WEIGHT , data(Mydata) )
fitStandrized <- lm.beta(fit)
coef(fit)
coef(fitStandrized)
coef(fitStandrized)
fitStandrized <- lm.beta(fit)
fitStandrized <- lm.beta(fit)
coef(fitStandrized)
library(QuantPsyc)
fit.beta <- lm.beta(fit)
coef(fit.beta)
coef(fit)
cat("\f")
fit.beta <- lm.beta(fit)
summary(fit.beta)
coef(fit.beta)
fit.beta
coef(fit)
fit.beta <- lm.beta(fit)
coef(fit.beta,standardized=TRUE)
#fit.beta <- lm.beta(fit)
#coef(fit.beta,standardized=TRUE)
#coef(fit)
beta.coef(fit)
#fit.beta <- lm.beta(fit)
#coef(fit.beta,standardized=TRUE)
#coef(fit)
beta(fit)
?beta
fit
summary(fit)
fit
names(fit)
residuals(fit)
#fit.beta <- lm.beta(fit)
#coef(fit.beta,standardized=TRUE)
#coef(fit)
#beta(fit)
sum(fit$residuals^2)
cat("\f")
# REGRESSION MULTIPLE sTANDARISE
#install.packages("QuantPsyc")
#library(QuantPsyc)
#fit.beta <- lm.beta(fit)
#coef(fit.beta,standardized=TRUE)
#coef(fit)
#beta(fit)
residuals(fit)
cat("La somme des carres des residus est : " sum( fit$residuals^2 ))
cat("\f")
# REGRESSION MULTIPLE sTANDARISE
#install.packages("QuantPsyc")
#library(QuantPsyc)
#fit.beta <- lm.beta(fit)
#coef(fit.beta,standardized=TRUE)
#coef(fit)
#beta(fit)
residuals(fit)
cat("La somme des carres des residus est : ", sum( fit$residuals^2 ))
names(fit)
cat(" le nombre de degres de libertés du residu : ", df.residual(fit))
anova(fit)
fitted(fit)
cat("\f")
# REGRESSION MULTIPLE sTANDARISE
#install.packages("QuantPsyc")
#library(QuantPsyc)
#fit.beta <- lm.beta(fit)
#coef(fit.beta,standardized=TRUE)
#coef(fit)
#beta(fit)
residuals(fit)
cat("La somme des carres des residus est : ", sum( fit$residuals^2 ),"\n")
cat(" le nombre de degres de libertés du residu : ", df.residual(fit))
print("residus observés")
residuals(fit)
cat("La somme des carres des residus est : ", sum( fit$residuals^2 ),"\n")
cat(" le nombre de degres de libertés du residu : ", df.residual(fit))
cat("\f")
cat("residus observés :",residuals(fit))
cat("La somme des carres des residus est : ", sum( fit$residuals^2 ),"\n")
cat(" le nombre de degres de libertés du residu : ", df.residual(fit))
cat("\f")
cat("residus observés :",residuals(fit),"\n")
cat("La somme des carres des residus est : ", sum( fit$residuals^2 ),"\n")
cat(" le nombre de degres de libertés du residu : ", df.residual(fit))
x <- fitted(fit)
